{"ast":null,"code":"// client/src/services/api.service.js\nimport axios from 'axios';\nimport { getToken, clearToken } from './auth.service';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // Unauthorized, clear token and redirect to login\n    clearToken();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  registerBasic: data => api.post('/auth/register-basic', data),\n  registerPremium: data => api.post('/auth/register-premium', data),\n  login: data => api.post('/auth/login', data),\n  requestPasswordReset: email => api.post('/auth/reset-password-request', {\n    email\n  }),\n  resetPassword: (token, newPassword) => api.post('/auth/reset-password', {\n    token,\n    newPassword\n  }),\n  getCurrentUser: () => api.get('/auth/me')\n};\n\n// User API\nexport const userAPI = {\n  updateProfile: data => api.put('/user/profile', data),\n  updatePreferences: data => api.put('/user/preferences', data),\n  updatePassword: data => api.put('/user/password', data),\n  deleteAccount: () => api.delete('/user/account')\n};\n\n// Alerts API\nexport const alertsAPI = {\n  getAlerts: (page = 1, limit = 10) => api.get(`/alerts?page=${page}&limit=${limit}`),\n  getAlertById: id => api.get(`/alerts/${id}`),\n  markAlertClicked: id => api.put(`/alerts/${id}/clicked`),\n  getAlternativeDates: id => api.get(`/alerts/${id}/alternative-dates`),\n  getAlertStats: () => api.get('/alerts/stats')\n};\n\n// Payment API (for premium subscription)\nexport const paymentAPI = {\n  createSubscription: () => api.post('/payment/subscription'),\n  cancelSubscription: () => api.delete('/payment/subscription'),\n  getSubscriptionStatus: () => api.get('/payment/subscription'),\n  getPaymentMethods: () => api.get('/payment/methods'),\n  addPaymentMethod: data => api.post('/payment/methods', data),\n  removePaymentMethod: id => api.delete(`/payment/methods/${id}`)\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/dashboard'),\n  getUsers: (page = 1, limit = 10, search = '', subscriptionType = '') => api.get(`/admin/users?page=${page}&limit=${limit}&search=${search}&subscriptionType=${subscriptionType}`),\n  getUserDetails: id => api.get(`/admin/users/${id}`),\n  updateUserSubscription: (id, subscriptionType) => api.put(`/admin/users/${id}/subscription`, {\n    subscriptionType\n  }),\n  getRoutes: (page = 1, limit = 20, search = '', tier = '', isActive = '', isSeasonal = '') => api.get(`/admin/routes?page=${page}&limit=${limit}&search=${search}&tier=${tier}&isActive=${isActive}&isSeasonal=${isSeasonal}`),\n  createRoute: data => api.post('/admin/routes', data),\n  updateRoute: (id, data) => api.put(`/admin/routes/${id}`, data),\n  deleteRoute: id => api.delete(`/admin/routes/${id}`),\n  runRouteOptimization: (isFullOptimization = false) => api.post('/admin/routes/optimize', {\n    isFullOptimization\n  }),\n  getApiStats: (startDate = '', endDate = '') => api.get(`/admin/api-stats?startDate=${startDate}&endDate=${endDate}`),\n  getAlerts: (page = 1, limit = 20, search = '', status = '', minDiscount = '') => api.get(`/admin/alerts?page=${page}&limit=${limit}&search=${search}&status=${status}&minDiscount=${minDiscount}`)\n};\nexport default api;","map":{"version":3,"names":["axios","getToken","clearToken","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","error","Promise","reject","response","status","window","location","href","authAPI","registerBasic","data","post","registerPremium","login","requestPasswordReset","email","resetPassword","newPassword","getCurrentUser","get","userAPI","updateProfile","put","updatePreferences","updatePassword","deleteAccount","delete","alertsAPI","getAlerts","page","limit","getAlertById","id","markAlertClicked","getAlternativeDates","getAlertStats","paymentAPI","createSubscription","cancelSubscription","getSubscriptionStatus","getPaymentMethods","addPaymentMethod","removePaymentMethod","adminAPI","getDashboardStats","getUsers","search","subscriptionType","getUserDetails","updateUserSubscription","getRoutes","tier","isActive","isSeasonal","createRoute","updateRoute","deleteRoute","runRouteOptimization","isFullOptimization","getApiStats","startDate","endDate","minDiscount"],"sources":["/Users/moussa/globegenius/client/src/services/api.service.js"],"sourcesContent":["// client/src/services/api.service.js\nimport axios from 'axios';\nimport { getToken, clearToken } from './auth.service';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = getToken();\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Unauthorized, clear token and redirect to login\n      clearToken();\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  registerBasic: (data) => api.post('/auth/register-basic', data),\n  registerPremium: (data) => api.post('/auth/register-premium', data),\n  login: (data) => api.post('/auth/login', data),\n  requestPasswordReset: (email) => api.post('/auth/reset-password-request', { email }),\n  resetPassword: (token, newPassword) => api.post('/auth/reset-password', { token, newPassword }),\n  getCurrentUser: () => api.get('/auth/me'),\n};\n\n// User API\nexport const userAPI = {\n  updateProfile: (data) => api.put('/user/profile', data),\n  updatePreferences: (data) => api.put('/user/preferences', data),\n  updatePassword: (data) => api.put('/user/password', data),\n  deleteAccount: () => api.delete('/user/account'),\n};\n\n// Alerts API\nexport const alertsAPI = {\n  getAlerts: (page = 1, limit = 10) => api.get(`/alerts?page=${page}&limit=${limit}`),\n  getAlertById: (id) => api.get(`/alerts/${id}`),\n  markAlertClicked: (id) => api.put(`/alerts/${id}/clicked`),\n  getAlternativeDates: (id) => api.get(`/alerts/${id}/alternative-dates`),\n  getAlertStats: () => api.get('/alerts/stats'),\n};\n\n// Payment API (for premium subscription)\nexport const paymentAPI = {\n  createSubscription: () => api.post('/payment/subscription'),\n  cancelSubscription: () => api.delete('/payment/subscription'),\n  getSubscriptionStatus: () => api.get('/payment/subscription'),\n  getPaymentMethods: () => api.get('/payment/methods'),\n  addPaymentMethod: (data) => api.post('/payment/methods', data),\n  removePaymentMethod: (id) => api.delete(`/payment/methods/${id}`),\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/dashboard'),\n  getUsers: (page = 1, limit = 10, search = '', subscriptionType = '') => \n    api.get(`/admin/users?page=${page}&limit=${limit}&search=${search}&subscriptionType=${subscriptionType}`),\n  getUserDetails: (id) => api.get(`/admin/users/${id}`),\n  updateUserSubscription: (id, subscriptionType) => \n    api.put(`/admin/users/${id}/subscription`, { subscriptionType }),\n  \n  getRoutes: (page = 1, limit = 20, search = '', tier = '', isActive = '', isSeasonal = '') => \n    api.get(`/admin/routes?page=${page}&limit=${limit}&search=${search}&tier=${tier}&isActive=${isActive}&isSeasonal=${isSeasonal}`),\n  createRoute: (data) => api.post('/admin/routes', data),\n  updateRoute: (id, data) => api.put(`/admin/routes/${id}`, data),\n  deleteRoute: (id) => api.delete(`/admin/routes/${id}`),\n  runRouteOptimization: (isFullOptimization = false) => \n    api.post('/admin/routes/optimize', { isFullOptimization }),\n  \n  getApiStats: (startDate = '', endDate = '') => \n    api.get(`/admin/api-stats?startDate=${startDate}&endDate=${endDate}`),\n  \n  getAlerts: (page = 1, limit = 20, search = '', status = '', minDiscount = '') => \n    api.get(`/admin/alerts?page=${page}&limit=${limit}&search=${search}&status=${status}&minDiscount=${minDiscount}`),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}