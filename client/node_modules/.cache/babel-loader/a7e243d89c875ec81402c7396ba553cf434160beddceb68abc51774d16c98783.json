{"ast":null,"code":"// client/src/services/auth.service.js\nimport jwtDecode from 'jwt-decode';\n\n// Token storage keys\nconst TOKEN_KEY = 'globegenius_token';\nconst USER_KEY = 'globegenius_user';\n\n/**\n * Set authentication token and user data\n * @param {string} token - JWT token\n * @param {Object} user - User data\n */\nexport const setAuth = (token, user) => {\n  localStorage.setItem(TOKEN_KEY, token);\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n};\n\n/**\n * Get authentication token\n * @returns {string|null} - JWT token or null if not logged in\n */\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Get current user data\n * @returns {Object|null} - User data or null if not logged in\n */\nexport const getUser = () => {\n  const userStr = localStorage.getItem(USER_KEY);\n  if (!userStr || userStr === 'undefined') return null;\n  try {\n    return JSON.parse(userStr);\n  } catch (error) {\n    console.error('Error parsing user data:', error);\n    return null;\n  }\n};\n\n/**\n * Check if user is authenticated\n * @returns {boolean} - True if authenticated, false otherwise\n */\nexport const isAuthenticated = () => {\n  const token = getToken();\n  if (!token) return false;\n  try {\n    // Decode token to check expiration\n    const decoded = jwtDecode(token);\n\n    // Check if token is expired\n    if (decoded.exp * 1000 < Date.now()) {\n      clearToken();\n      return false;\n    }\n    return true;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    clearToken();\n    return false;\n  }\n};\n\n/**\n * Check if user is admin\n * @returns {boolean} - True if admin, false otherwise\n */\nexport const isAdmin = () => {\n  const user = getUser();\n  return user && user.isAdmin === true;\n};\n\n/**\n * Check if user has premium subscription\n * @returns {boolean} - True if premium, false otherwise\n */\nexport const isPremium = () => {\n  const user = getUser();\n  return user && user.subscriptionType === 'premium';\n};\n\n/**\n * Clear authentication data (logout)\n */\nexport const clearToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n};\n\n/**\n * Update stored user data\n * @param {Object} userData - Updated user data\n */\nexport const updateUserData = userData => {\n  const currentUser = getUser();\n  if (!currentUser) return;\n  const updatedUser = {\n    ...currentUser,\n    ...userData\n  };\n  localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\n};\nexport default {\n  setAuth,\n  getToken,\n  getUser,\n  isAuthenticated,\n  isAdmin,\n  isPremium,\n  clearToken,\n  updateUserData\n};","map":{"version":3,"names":["jwtDecode","TOKEN_KEY","USER_KEY","setAuth","token","user","localStorage","setItem","JSON","stringify","getToken","getItem","getUser","userStr","parse","error","console","isAuthenticated","decoded","exp","Date","now","clearToken","isAdmin","isPremium","subscriptionType","removeItem","updateUserData","userData","currentUser","updatedUser"],"sources":["/Users/moussa/globegenius/client/src/services/auth.service.js"],"sourcesContent":["// client/src/services/auth.service.js\nimport jwtDecode from 'jwt-decode';\n\n// Token storage keys\nconst TOKEN_KEY = 'globegenius_token';\nconst USER_KEY = 'globegenius_user';\n\n/**\n * Set authentication token and user data\n * @param {string} token - JWT token\n * @param {Object} user - User data\n */\nexport const setAuth = (token, user) => {\n  localStorage.setItem(TOKEN_KEY, token);\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n};\n\n/**\n * Get authentication token\n * @returns {string|null} - JWT token or null if not logged in\n */\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Get current user data\n * @returns {Object|null} - User data or null if not logged in\n */\nexport const getUser = () => {\n  const userStr = localStorage.getItem(USER_KEY);\n  if (!userStr || userStr === 'undefined') return null;\n  try {\n    return JSON.parse(userStr);\n  } catch (error) {\n    console.error('Error parsing user data:', error);\n    return null;\n  }\n};\n\n/**\n * Check if user is authenticated\n * @returns {boolean} - True if authenticated, false otherwise\n */\nexport const isAuthenticated = () => {\n  const token = getToken();\n  if (!token) return false;\n  \n  try {\n    // Decode token to check expiration\n    const decoded = jwtDecode(token);\n    \n    // Check if token is expired\n    if (decoded.exp * 1000 < Date.now()) {\n      clearToken();\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    clearToken();\n    return false;\n  }\n};\n\n/**\n * Check if user is admin\n * @returns {boolean} - True if admin, false otherwise\n */\nexport const isAdmin = () => {\n  const user = getUser();\n  return user && user.isAdmin === true;\n};\n\n/**\n * Check if user has premium subscription\n * @returns {boolean} - True if premium, false otherwise\n */\nexport const isPremium = () => {\n  const user = getUser();\n  return user && user.subscriptionType === 'premium';\n};\n\n/**\n * Clear authentication data (logout)\n */\nexport const clearToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n};\n\n/**\n * Update stored user data\n * @param {Object} userData - Updated user data\n */\nexport const updateUserData = (userData) => {\n  const currentUser = getUser();\n  if (!currentUser) return;\n  \n  const updatedUser = {\n    ...currentUser,\n    ...userData\n  };\n  \n  localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\n};\n\nexport default {\n  setAuth,\n  getToken,\n  getUser,\n  isAuthenticated,\n  isAdmin,\n  isPremium,\n  clearToken,\n  updateUserData\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}