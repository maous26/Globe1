{"ast":null,"code":"var _jsxFileName = \"/Users/moussa/globegenius/client/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/contexts/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI, userAPI } from '../services/api.service';\nimport { setAuth, getUser, getToken, isAuthenticated, isAdmin, isPremium, clearToken, updateUserData } from '../services/auth.service';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      if (isAuthenticated()) {\n        try {\n          // Get fresh user data from API\n          const response = await authAPI.getCurrentUser();\n          setUser(response.data.user);\n          updateUserData(response.data.user);\n        } catch (err) {\n          console.error('Error fetching current user:', err);\n          // If there's an error, clear token\n          clearToken();\n          setUser(null);\n        }\n      } else {\n        // Not authenticated\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n\n  // Register new user (basic/free tier)\n  const registerBasic = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.registerBasic(userData);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Erreur lors de l\\'inscription');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register premium user\n  const registerPremium = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.registerPremium(userData);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Set auth data\n      setAuth(token, user);\n      setUser({\n        ...user,\n        needsOnboarding: true\n      }); // Mark user as needing onboarding\n\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Erreur lors de l\\'inscription premium');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.login(credentials);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Set auth data\n      setAuth(token, user);\n      setUser(user);\n      return response.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Identifiants incorrects');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    clearToken();\n    setUser(null);\n  };\n\n  // Request password reset\n  const requestPasswordReset = async email => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.requestPasswordReset(email);\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Erreur lors de la demande de réinitialisation');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, newPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.resetPassword(token, newPassword);\n      return response.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Erreur lors de la réinitialisation');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update profile\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await userAPI.updateProfile(profileData);\n      const updatedUser = response.data.user;\n      if (updatedUser) {\n        // Update user in localStorage and state only if valid\n        setAuth(getToken(), updatedUser);\n        setUser(updatedUser);\n      }\n      return response.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Erreur lors de la mise à jour du profil');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check if user is admin\n  const checkIsAdmin = () => {\n    return isAdmin();\n  };\n\n  // Check if user has premium subscription\n  const checkIsPremium = () => {\n    return user && user.subscriptionType === 'premium';\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: checkIsAdmin(),\n    isPremium: checkIsPremium(),\n    registerBasic,\n    registerPremium,\n    login,\n    logout,\n    requestPasswordReset,\n    resetPassword,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authAPI","userAPI","setAuth","getUser","getToken","isAuthenticated","isAdmin","isPremium","clearToken","updateUserData","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","initAuth","response","getCurrentUser","data","err","console","registerBasic","userData","_err$response","_err$response$data","message","registerPremium","token","needsOnboarding","_err$response2","_err$response2$data","login","credentials","_err$response3","_err$response3$data","logout","requestPasswordReset","email","_err$response4","_err$response4$data","resetPassword","newPassword","_err$response5","_err$response5$data","updateProfile","profileData","updatedUser","_err$response6","_err$response6$data","checkIsAdmin","checkIsPremium","subscriptionType","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/moussa/globegenius/client/src/contexts/AuthContext.js"],"sourcesContent":["// client/src/contexts/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI, userAPI } from '../services/api.service';\nimport { \n  setAuth, \n  getUser, \n  getToken,\n  isAuthenticated, \n  isAdmin, \n  isPremium, \n  clearToken, \n  updateUserData \n} from '../services/auth.service';\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize auth state\n  useEffect(() => {\n    const initAuth = async () => {\n      if (isAuthenticated()) {\n        try {\n          // Get fresh user data from API\n          const response = await authAPI.getCurrentUser();\n          setUser(response.data.user);\n          updateUserData(response.data.user);\n        } catch (err) {\n          console.error('Error fetching current user:', err);\n          // If there's an error, clear token\n          clearToken();\n          setUser(null);\n        }\n      } else {\n        // Not authenticated\n        setUser(null);\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  // Register new user (basic/free tier)\n  const registerBasic = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.registerBasic(userData);\n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Erreur lors de l\\'inscription');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register premium user\n  const registerPremium = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.registerPremium(userData);\n      const { token, user } = response.data;\n      \n      // Set auth data\n      setAuth(token, user);\n      setUser({...user, needsOnboarding: true}); // Mark user as needing onboarding\n      \n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Erreur lors de l\\'inscription premium');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.login(credentials);\n      const { token, user } = response.data;\n      \n      // Set auth data\n      setAuth(token, user);\n      setUser(user);\n      \n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Identifiants incorrects');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    clearToken();\n    setUser(null);\n  };\n\n  // Request password reset\n  const requestPasswordReset = async (email) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.requestPasswordReset(email);\n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Erreur lors de la demande de réinitialisation');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, newPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.resetPassword(token, newPassword);\n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Erreur lors de la réinitialisation');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update profile\n  const updateProfile = async (profileData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await userAPI.updateProfile(profileData);\n      const updatedUser = response.data.user;\n      if (updatedUser) {\n        // Update user in localStorage and state only if valid\n        setAuth(getToken(), updatedUser);\n        setUser(updatedUser);\n      }\n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Erreur lors de la mise à jour du profil');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check if user is admin\n  const checkIsAdmin = () => {\n    return isAdmin();\n  };\n\n  // Check if user has premium subscription\n  const checkIsPremium = () => {\n    return user && user.subscriptionType === 'premium';\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: checkIsAdmin(),\n    isPremium: checkIsPremium(),\n    registerBasic,\n    registerPremium,\n    login,\n    logout,\n    requestPasswordReset,\n    resetPassword,\n    updateProfile\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}